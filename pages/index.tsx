import React from "react";
import {
  Table,
  Thead,
  Tr,
  Th,
  Tbody,
  Td,
  Stack,
  Textarea,
  Input,
  Button,
  useToast,
} from "@chakra-ui/react";
import Head from "next/head";
import {
  nextMonday,
  nextTuesday,
  nextWednesday,
  nextThursday,
  nextFriday,
  nextSaturday,
  nextSunday,
  addMinutes,
  setHours,
  setMinutes,
} from "date-fns";
import {formatISO} from "date-fns/esm";

enum WeekDay {
  Lunes = "0",
  Martes = "1",
  Miércoles = "2",
  Jueves = "3",
  Viernes = "4",
  Sábado = "5",
  Domingo = "6",
}

interface Routine {
  description: string;
  time: string;
}

interface Steps {
  start: Routine;
  end: Routine;
}

interface RoutineForm extends HTMLFormElement {
  description: HTMLTextAreaElement;
  hours: HTMLInputElement;
  minutes: HTMLInputElement;
  day: HTMLInputElement;
}

function getNextDate(weekDay: Day) {
  switch (weekDay) {
    case 0:
      return nextMonday(new Date());
    case 1:
      return nextTuesday(new Date());
    case 2:
      return nextWednesday(new Date());
    case 3:
      return nextThursday(new Date());
    case 4:
      return nextFriday(new Date());
    case 5:
      return nextSaturday(new Date());
    case 6:
      return nextSunday(new Date());
  }
}

export default function Home() {
  const toast = useToast();

  function handleSubmit(event: React.FormEvent<RoutineForm>) {
    event.preventDefault();

    const description = event.currentTarget.description.value;
    const hours = Number(event.currentTarget.hours.value);
    const minutes = Number(event.currentTarget.minutes.value);
    const day = Number(event.currentTarget.day.value) as Day;

    const date = getNextDate(day);
    const startDate = setMinutes(setHours(date, hours), minutes);
    const endDate = addMinutes(startDate, 30);

    window.gapi.client.calendar.events
      .insert({
        calendarId: "primary",
        resource: {
          summary: `Rutina <dadapp>`,
          recurrence: ["RRULE:FREQ=WEEKLY"],
          description,
          start: {
            dateTime: formatISO(startDate),
            timeZone: "America/Argentina/Buenos_Aires",
          },
          end: {
            dateTime: formatISO(endDate),
            timeZone: "America/Argentina/Buenos_Aires",
          },
        },
      })
      .then(() =>
        toast({
          status: "success",
          title: "Bien!",
          position: "top-right",
          description: "Tu rutina se creó correctamente",
        }),
      )
      .catch(() =>
        toast({
          status: "error",
          title: "Oops!",
          position: "top-right",
          description: "Hubo un error creando tu rutina, intentá de nuevo más tarde",
        }),
      );
  }

  return (
    <div>
      <Head>
        <title>Dadapp</title>
        <meta content="Generated by create next app" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main>
        <Table variant="simple">
          <Thead>
            <Tr>
              <Th>Día de la semana</Th>
              <Th>Inicio del día</Th>
              <Th>Fin del día</Th>
            </Tr>
          </Thead>
          <Tbody>
            {Object.entries(WeekDay).map(([label, day]) => (
              <Tr key={day}>
                <Td>{label}</Td>
                {["start", "end"].map((time: keyof Steps) => (
                  <Td key={time}>
                    <form onSubmit={handleSubmit}>
                      <Input name="day" type="hidden" value={day} />
                      <Stack>
                        <Textarea isRequired name="description" />
                        <Stack alignItems="flex-end" direction="row" justifyContent="space-between">
                          <Stack alignItems="center" direction="row">
                            <Input
                              isRequired
                              max={23}
                              min={0}
                              name="hours"
                              type="number"
                              width={16}
                            />
                            <span> : </span>
                            <Input
                              isRequired
                              max={59}
                              min={0}
                              name="minutes"
                              type="number"
                              width={16}
                            />
                            <span>hs</span>
                          </Stack>
                          <Button type="submit">Crear rutina</Button>
                        </Stack>
                      </Stack>
                    </form>
                  </Td>
                ))}
              </Tr>
            ))}
          </Tbody>
        </Table>
      </main>
    </div>
  );
}
